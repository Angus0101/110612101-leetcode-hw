from collections import OrderedDict

class LRUCache:
    def __init__(self, capacity: int):
        self.cache = OrderedDict()  # 有序字典來存 key-value
        self.capacity = capacity    # 記錄快取容量

    def get(self, key: int) -> int:
        if key not in self.cache:
            return -1  # 如果 key 不存在，回傳 -1
        
        # 如果 key 存在，把它移到最前面，代表最近使用
        self.cache.move_to_end(key, last=False)
        return self.cache[key]

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            # 如果 key 存在，先刪除舊的 key
            self.cache.pop(key)

        # 插入新的 key-value，並放到最前面
        self.cache[key] = value
        self.cache.move_to_end(key, last=False)

        # 如果超過容量，刪除最久沒用的（最後一個元素）
        if len(self.cache) > self.capacity:
            self.cache.popitem(last=True)  # 刪除最後面的 key
